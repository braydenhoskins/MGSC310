x <- (1,3,12,42,58,61,71,89,91,98)
x <- c(1,3,12,42,58,61,71,89,91,98)
mean(x)
median(x)
x <- c(4,
28,
31,
63,
66,
68,
72,
72,
74,
77)
x
mean(x)
median(x)
x <- c(19,
27
32
51
56
59
60
66
68
83)
,
x <- c(19,
27,
32,
51,
56,
59,
60,
66,
68,
83)
mean(x)
x <-c(2,
4,
4,
7,
30,
37,
45,
64,
77,
93)
mean(x)
max(x)
median(x)
x <-c(15,
19,
29,
58,
71,
72,
88,
91,
96,
98)
median(x)
x <-c(4,
15,
17,
17,
22,
49,
54,
57,
77,
84)
median(x)
mean(x)
max(x)
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
steam$publisher <- do.call('rbind',strsplit(as.character(steam$publisher), ';', fixed=TRUE))[,1]
steam$developer <- do.call('rbind',strsplit(as.character(steam$developer), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$developer <- as.factor(steam$developer)
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
steam$publisher <- as.factor(steam$publisher)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <100,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
unique(steam$categories)
?fct_lump
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
