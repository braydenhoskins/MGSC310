unique(steam$genres)
# Reducing the number of genres
#-----------------------------------------------#
#          Creating Predictor Variable          #
#-----------------------------------------------#
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam <- subset(steam, select = -c(owners,categories,positive_ratings,negative_ratings,
median_playtime))
steam$required_age <- as.factor(steam$required_age)
set.seed(2019)
train_index <- sample(1:nrow(steam),.75*nrow(steam),replace = FALSE)
steam_train <- steam[train_index,]
steam_test <- steam[-train_index,]
####Used to find significant predictors
steam_logit <- glm(successfulGame~.,
data = steam_train,
family = "binomial")
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+factor(genres) + factor(required_age)+
average_playtime+simple_categories,
data = steam_train,
family = "binomial")
summary(steam_logit)
####Used to find significant predictors
steam_logit <- glm(successfulGame~.,
data = steam_train,
family = "binomial")
summar(steam_logit)
summary(steam_logit)
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+factor(genres) + factor(required_age)+
average_playtime+,
data = steam_train,
family = "binomial")
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+factor(genres) + factor(required_age)+
average_playtime+,
data = steam_train,
family = "binomial")
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+factor(genres) + factor(required_age)+
average_playtime+,
data = steam_train,
family = "binomial")
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+factor(genres) + factor(required_age)+
average_playtime,
data = steam_train,
family = "binomial")
summary(steam_logit)
str(steam)
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+genres + required_age+
average_playtime,
data = steam_train,
family = "binomial")
summary(steam_logit)
exp(steam_logit$coefficients)
steam_train$logit_preds <- predict(steam_logit,type = "response")
steam_test$logit_preds <- predict(steam_logit,newdata = steam_test,
type = "response")
PRROC_obj <- roc.curve(scores.class0 = steam_train$logit_preds,
weights.class0=steam_train$successfulGame,
curve=TRUE)
plot(PRROC_obj)
train_ROC <- ggplot(steam_train,aes(m = logit_preds,
d = successfulGame)) +
geom_roc(labelsize = 3.5,
cutoffs.at = c(.99,.9,.7,.6,.5,.4,.1,.01)) +
labs(title = "ROC Curve for Train Data",x = "False Positive Fraction",
y= "True Positive Fraction")
test_ROC <- ggplot(steam_test,aes(m = logit_preds,
d = successfulGame)) +
geom_roc(labelsize = 3.5,
cutoffs.at = c(.99,.9,.7,.6,.5,.4,.1,.01)) +
labs(title = "ROC Curve for Test Data",x = "False Positive Fraction",
y= "True Positive Fraction")
PRROC_obj_test <- roc.curve(scores.class0 = steam_test$logit_preds,
weights.class0=steam_test$successfulGame,
curve=TRUE)
plot(PRROC_obj_test)
train_ROC
PRROC_obj_test <- roc.curve(scores.class0 = steam_test$logit_preds,
weights.class0=steam_test$successfulGame,
curve=TRUE)
plot(PRROC_obj_test)
test_ROC <- ggplot(steam_test,aes(m = logit_preds,
d = successfulGame)) +
geom_roc(labelsize = 3.5,
cutoffs.at = c(.99,.9,.7,.6,.5,.4,.1,.01)) +
labs(title = "ROC Curve for Test Data",x = "False Positive Fraction",
y= "True Positive Fraction")
test_ROC
calc_auc(train_ROC)
calc_auc(test_ROC)
CrossTable(steam_train$pred_class,steam_train$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
CrossTable(steam_test$pred_class,steam_test$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
steam_train$pred_class <- ifelse(steam_train$logit_preds >.04,1,0)
steam_test$pred_class <-ifelse(steam_test$logit_preds>.04,1,0)
CrossTable(steam_train$pred_class,steam_train$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
CrossTable(steam_test$pred_class,steam_test$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
CrossTable(steam_train$pred_class,steam_train$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
CrossTable(steam_test$pred_class,steam_test$successfulGame,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+relevel(genres,ref = "Other") + required_age+
average_playtime,
data = steam_train,
family = "binomial")
summary(steam_logit)
exp(steam_logit$coefficients)
#-----------------------------#
#       Library Calls         #
#-----------------------------#
library(forcats)
library(tidyverse)
library(summarytools)
library(corrplot)
library(ggplot2)
library(glmnet)
library(glmnetUtils)
library(randomForest)
library(randomForestExplainer)
library(caret)
library(plotROC)
library(PRROC)
library(gmodels)
library(tree)
#------------------------------------#
#       Importing Data Set           #
#------------------------------------#
steam <- read.csv("steam.csv")
#---------------------------------------------#
#        Exploratory Data Analysis            #
#---------------------------------------------#
nrow(steam[!complete.cases(steam),])
# There are no rows with missing values
#---------------------------------------------#
#       Variable Engineering/Cleaning         #
#---------------------------------------------#
steam$price <- steam$price *1.28
# Turns the units into dollars
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
# Removing variables that are not useful
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
# Getting rid of all the ';' delimited variables and instead assigned them a single value for that column
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
# Making categories and genres as factored variables
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Removing outliers
steam$simple_categories <- fct_lump(steam$categories,n = 4)
# Creating a factored feature with only 4 options
unique(steam$simple_categories)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
# Another way of lumping together factors
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
# Reducing the number of genres
#-----------------------------------------------#
#          Creating Predictor Variable          #
#-----------------------------------------------#
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam <- subset(steam, select = -c(owners,categories,positive_ratings,negative_ratings,
median_playtime))
steam$required_age <- as.factor(steam$required_age)
####Now only significant predictors included
steam_logit <- glm(successfulGame~price+relevel(genres,ref = "Other") + required_age+
average_playtime,
data = steam_train,
family = "binomial")
summary(steam_logit)
exp(steam_logit$coefficients)
PRROC_obj_train <- roc.curve(scores.class0 = steam_train$logit_preds,
weights.class0=steam_train$successfulGame,
curve=TRUE)
plot(PRROC_obj_train)
PRROC_obj_test <- roc.curve(scores.class0 = steam_test$logit_preds,
weights.class0=steam_test$successfulGame,
curve=TRUE)
plot(PRROC_obj_test)
results_df <- data.frame(mtry = 1:6,
oob_err)
ggplot(results_df,aes(x = mtry,y = oob_err)) + geom_point() +geom_line()
#------------------------------------#
#     Reduced Mtry Random Forest     #
#------------------------------------#
###run before fitting
steam$successfulGame <- as.factor(steam$successfulGame)
set.seed(2019)
train_idx <- sample(1:nrow(steam), size = floor(.75 * nrow(steam)))
steam_train <- steam[train_idx,]
steam_test <- steam[-train_idx,]
random_forest_steam <- randomForest(successfulGame~.,
data = steam_train,
mtry = 2,
ntrees = 500,
type = classification,
importance = TRUE)
random_forest_preds <- predict(random_forest_steam,type = "response")
preds_2 <- data.frame(steam_train,preds= random_forest_preds)
preds_test_2 <-data.frame(steam_test,preds = predict(random_forest_steam,
newdata = steam_test,
type = "response"))
random_forest_steam
####bagging for randomforest
steam_bagged <- randomForest(successfulGame~.,
data = steam_train,
mtry = 6,
ntrees = 500,
type = classification,
importance = TRUE)
steam_bagged
#importance check
importance(random_forest_steam)
plot(random_forest_steam)
varImpPlot(random_forest_steam)
plot(random_forest_steam)
set.seed(2019)
train_idx <- sample(1:nrow(steam), size = floor(.75 * nrow(steam)))
steam_train <- steam[train_idx,]
steam_test <- steam[-train_idx,]
random_forest_steam <- randomForest(successfulGame~.,
data = steam_train,
mtry = 2,
ntrees = 500,
type = classification,
importance = TRUE)
summary(random_forest_steam)
randomForestExplainer(random_forest_steam)
explain_forest(random_forest_steam)
#       Importing Data Set           #
#------------------------------------#
steam <- read.csv("steam.csv")
#---------------------------------------------#
#        Exploratory Data Analysis            #
#---------------------------------------------#
nrow(steam[!complete.cases(steam),])
# There are no rows with missing values
#---------------------------------------------#
#       Variable Engineering/Cleaning         #
#---------------------------------------------#
steam$price <- steam$price *1.28
# Turns the units into dollars
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
# Removing variables that are not useful
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
# Getting rid of all the ';' delimited variables and instead assigned them a single value for that column
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
# Making categories and genres as factored variables
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Removing outliers
steam$simple_categories <- fct_lump(steam$categories,n = 4)
# Creating a factored feature with only 4 options
unique(steam$simple_categories)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
# Another way of lumping together factors
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
# Reducing the number of genres
#-----------------------------------------------#
#          Creating Predictor Variable          #
#-----------------------------------------------#
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam <- subset(steam, select = -c(owners,categories,positive_ratings,negative_ratings,
median_playtime))
steam$required_age <- as.factor(steam$required_age)
steam$successfulGame <- as.factor(steam$successfulGame)
set.seed(2019)
train_idx <- sample(1:nrow(steam), size = floor(.75 * nrow(steam)))
steam_train <- steam[train_idx,]
steam_test <- steam[-train_idx,]
###tree based on the top 4 most important variables
steam_tree <- tree(successfulGame~.,
data = steam_train)
plot(steam_tree)
text(steam_tree,pretty = 0)
tree_cv <- cv.tree(steam_tree)
best_tree_index <- which.min(tree_cv$dev)
best_size <- tree_cv$size[best_tree_index]
summary(steam_tree)
pruned_tree <- prune.tree(steam_tree,best = best_size)
plot(pruned_tree)
text(pruned_tree,pretty=0)
summary(pruned_tree)
basic_preds_train <- data.frame(steam_train,preds = predict(pruned_tree,
type = "class"))
basic_preds_test <- data.frame(steam_test,preds = predict(pruned_tree,
newdata = steam_test,
type = "class"))
CrossTable(basic_preds_train$successfulGame,basic_preds_train$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
###for test
CrossTable(basic_preds_test$successfulGame, basic_preds_test$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
Importing Data Set           #
#------------------------------------#
steam <- read.csv("steam.csv")
#---------------------------------------------#
#        Exploratory Data Analysis            #
#---------------------------------------------#
nrow(steam[!complete.cases(steam),])
# There are no rows with missing values
#---------------------------------------------#
#       Variable Engineering/Cleaning         #
#---------------------------------------------#
steam$price <- steam$price *1.28
# Turns the units into dollars
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
# Removing variables that are not useful
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
# Getting rid of all the ';' delimited variables and instead assigned them a single value for that column
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
# Making categories and genres as factored variables
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Removing outliers
steam$simple_categories <- fct_lump(steam$categories,n = 4)
# Creating a factored feature with only 4 options
unique(steam$simple_categories)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
# Another way of lumping together factors
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
# Reducing the number of genres
#-----------------------------------------------#
#          Creating Predictor Variable          #
#-----------------------------------------------#
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam <- subset(steam, select = -c(owners,categories,positive_ratings,negative_ratings,
median_playtime))
steam$required_age <- as.factor(steam$required_age)
steam$successfulGame <- as.factor(steam$successfulGame)
set.seed(2019)
train_idx <- sample(1:nrow(steam), size = floor(.75 * nrow(steam)))
steam_train <- steam[train_idx,]
steam_test <- steam[-train_idx,]
random_forest_steam <- randomForest(successfulGame~.,
data = steam_train,
mtry = 2,
ntrees = 500,
type = classification,
importance = TRUE)
random_forest_preds <- predict(random_forest_steam,type = "response")
preds_2 <- data.frame(steam_train,preds= random_forest_preds)
preds_test_2 <-data.frame(steam_test,preds = predict(random_forest_steam,
newdata = steam_test,
type = "response"))
explain_forest(random_forest_steam)
#importance check
importance(random_forest_steam)
plot(random_forest_steam)
varImpPlot(random_forest_steam)
##training confusion matrix
CrossTable(preds_2$successfulGame,preds_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
#test confusion matrix
CrossTable(preds_test_2$successfulGame,preds_test_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
importance(random_forest_steam)
plot(random_forest_steam)
varImpPlot(random_forest_steam)
##training confusion matrix
CrossTable(preds_2$successfulGame,preds_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
#test confusion matrix
CrossTable(preds_test_2$successfulGame,preds_test_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
importance(random_forest_steam)
plot(random_forest_steam)
varImpPlot(random_forest_steam)
##training confusion matrix
CrossTable(preds_2$successfulGame,preds_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
#test confusion matrix
CrossTable(preds_test_2$successfulGame,preds_test_2$preds,
prop.r = FALSE,
prop.c = FALSE,
prop.t = FALSE,
prop.chisq = FALSE)
