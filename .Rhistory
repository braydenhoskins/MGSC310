x <- (1,3,12,42,58,61,71,89,91,98)
x <- c(1,3,12,42,58,61,71,89,91,98)
mean(x)
median(x)
x <- c(4,
28,
31,
63,
66,
68,
72,
72,
74,
77)
x
mean(x)
median(x)
x <- c(19,
27
32
51
56
59
60
66
68
83)
,
x <- c(19,
27,
32,
51,
56,
59,
60,
66,
68,
83)
mean(x)
x <-c(2,
4,
4,
7,
30,
37,
45,
64,
77,
93)
mean(x)
max(x)
median(x)
x <-c(15,
19,
29,
58,
71,
72,
88,
91,
96,
98)
median(x)
x <-c(4,
15,
17,
17,
22,
49,
54,
57,
77,
84)
median(x)
mean(x)
max(x)
<<<<<<< HEAD
###Summary Statistics R code by Noah Estrada-Rand, Brady Hoskins, Charles Filce
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
#####exploratory data analysis
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
steam$publisher <- do.call('rbind',strsplit(as.character(steam$publisher), ';', fixed=TRUE))[,1]
steam$developer <- do.call('rbind',strsplit(as.character(steam$developer), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$developer <- as.factor(steam$developer)
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
steam$publisher <- as.factor(steam$publisher)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <100,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
###one way to do it
steam$simple_categories <- fct_lump(steam$categories,n = 4)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
###creates variable successful game to help predict by (I was thinking we could
#use this as our predicted variable)(1 is a successful game - over 1 million sold,0 is anything less)
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam$successfulGame <- as.factor(steam$successfulGame)
steam <- subset(steam, select = -c(owners,developer))
boxplot(steam$price~steam$simple_categories)
boxplot(steam$price~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
boxplot(steam$positive_ratings~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <100,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
boxplot(steam$positive_ratings~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
steam <- steam[steam$price <100,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 6e+05,]
steam <- steam[steam$positive_ratings < 6e+06,]
boxplot(steam$positive_ratings~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
max(steam$positive_ratings)
boxplot(steam$price~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
boxplot(steam$price)
steam <- steam[steam$price <50,]
boxplot(steam$price~steam$simple_categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
boxplot(steam$price~steam$categories,
main = "Boxplot of Price By Category",
xlab = "Categories",
ylab = "Price (dollars)")
unique(steam$publisher)
<<<<<<< HEAD
###Summary Statistics R code by Noah Estrada-Rand, Brady Hoskins, Charles Filce
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
#####exploratory data analysis
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
steam$publisher <- do.call('rbind',strsplit(as.character(steam$publisher), ';', fixed=TRUE))[,1]
steam$developer <- do.call('rbind',strsplit(as.character(steam$developer), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$developer <- as.factor(steam$developer)
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
steam$publisher <- as.factor(steam$publisher)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
###one way to do it
steam$simple_categories <- fct_lump(steam$categories,n = 4)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
unique(steam$developer
)
<<<<<<< HEAD
###Summary Statistics R code by Noah Estrada-Rand, Brady Hoskins, Charles Filce
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
#####exploratory data analysis
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
###one way to do it
steam$simple_categories <- fct_lump(steam$categories,n = 4)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
unique(steam$categories)
###creates variable successful game to help predict by (I was thinking we could
#use this as our predicted variable)(1 is a successful game - over 1 million sold,0 is anything less)
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam$successfulGame <- as.factor(steam$successfulGame)
steam <- subset(steam, select = -c(owners))
colnames(steam)
unique(steam$genres)
###reducing the number of genres
steam$genres <- fct_lump(steam$genres)
unique(steam$genres)
###reducing the number of genres
steam$genres <- fct_lump(steam$genresn = 5)
###reducing the number of genres
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
table(Steam$genre)
table(steam$genre)
<<<<<<< HEAD
###Summary Statistics R code by Noah Estrada-Rand, Brady Hoskins, Charles Filce
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
#####exploratory data analysis
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
###one way to do it
steam$simple_categories <- fct_lump(steam$categories,n = 4)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
unique(steam$categories)
###reducing the number of genres
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
###creates variable successful game to help predict by (I was thinking we could
#use this as our predicted variable)(1 is a successful game - over 1 million sold,0 is anything less)
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam$successfulGame <- as.factor(steam$successfulGame)
steam <- subset(steam, select = -c(owners))
ggplot(steam,aes(x = genre,y = average_playtime)) + geom_boxplot()
ggplot(steam,aes(x = genres,y = average_playtime)) + geom_boxplot()
ggplot(steam,aes(x = genres,y = price)) + geom_boxplot()
ggplot(steam,aes(x = genres,y = price)) + geom_boxplot() +
labs(title = "Boxplots of Price By Genre",x = "Genres",y = "Price (dollars)")
ggplot(steam,aes(x = price,y = average_playtime)) +
geom_point(aes(color = successfulGame)) +
labs(x = "Price of the Game (dollars)",y ="Average Playtime (hrs)",
title = "Average Playtime Plotted Against Price of Game")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
library(summarytools)
library(forcats)
library(corrplot)
library(ggplot2)
ggplot(steam,aes(x = price,y = successfulGame)) +
geom_point()+
labs(title = "Successful Game plotted Against Average Playtime",
x = "Price of a Game (dollars)",y = "Successful Game (1 = Yes, 0 = No)")
ggplot(steam,aes(x = price,y = successfulGame)) +
geom_point()+
labs(title = "Successful Game plotted Against Average Playtime",
x = "Price of a Game (dollars)",y = "Successful Game (1 = Yes, 0 = No)")
<<<<<<< HEAD
###Summary Statistics R code by Noah Estrada-Rand, Brady Hoskins, Charles Filce
setwd("C:\\Users\\noahe\\Desktop\\MGSC310")
steam <- read.csv("steam.csv")
#####exploratory data analysis
###there are no rows with missing values
nrow(steam[!complete.cases(steam),])
###variable engineering/cleaning
#steam$pos_rating_ratio <- steam$positive_ratings/steam$negative_ratings
##turns the unites into dollars
steam$price <- steam$price *1.28
####got rid of cariables that wont really help us
steam<- subset(steam, select = -c(appid,english,steamspy_tags,
name,release_date,
platforms,publisher,developer))
####I got rid of all the ';' delimited variables and instead assigned them a single value for that columne
steam$genres <- do.call('rbind',strsplit(as.character(steam$genres), ';', fixed=TRUE))[,1]
steam$categories <- do.call('rbind',strsplit(as.character(steam$categories), ';', fixed=TRUE))[,1]
###turn them all into factors
steam$categories <- as.factor(steam$categories)
steam$genres <- as.factor(steam$genres)
###removing outliers
steam <- steam[steam$average_playtime < 100000,]
steam <- steam[steam$price <50,]
steam <- steam[steam$average_playtime < 40000,]
steam <- steam[steam$negative_ratings < 2e+05,]
steam <- steam[steam$positive_ratings < 1e+06,]
# Creating Groups of factored variables
library(forcats)
library(tidyverse)
fct_count(steam$categories)
steam %>%
mutate(categories = fct_lump(categories, n =5))%>%
count(categories)
###one way to do it
steam$simple_categories <- fct_lump(steam$categories,n = 4)
steam$categories <- ifelse(steam$categories == "Single-player","SinglePlayer",
ifelse(steam$categories == "Multi-player","Multi-Player",
ifelse(steam$categories == "Online Multi-Player","Multi-Player",
ifelse(steam$categories == "Local Multi-Player","Multi-Player",
ifelse(steam$categories == "MMO","MMO",
ifelse(steam$categories == "Co-op","Co-op",
ifelse(steam$categories == "Shared/Split Screen","Co-op",
ifelse(steam$categories == "Local Co-op","Co-op",
ifelse(steam$categories == "Online Co-op","Co-op",
ifelse(steam$categories == "Steam Cloud","Steam",
ifelse(steam$categories == "Steam Trading Cards","Steam",
ifelse(steam$categories == "Steam Leaderboards","Steam",
ifelse(steam$categories == "Steam Achievements","Steam","Other")))))))))))))
steam$categories <- as.factor(steam$categories)
unique(steam$categories)
unique(steam$categories)
###reducing the number of genres
steam$genres <- fct_lump(steam$genres,n = 5)
unique(steam$genres)
###creates variable successful game to help predict by (I was thinking we could
#use this as our predicted variable)(1 is a successful game - over 1 million sold,0 is anything less)
steam$successfulGame <- ifelse(steam$owners == "10000000-20000000",1,
ifelse(steam$owners == "20000000-50000000",1,
ifelse(steam$owners == "50000000-100000000",1,
ifelse(steam$owners == "100000000-200000000",1,
ifelse(steam$owners == "5000000-10000000",1,
ifelse(steam$owners == "2000000-5000000",1,
ifelse(steam$owners == "1000000-2000000",1,0)))))))
steam$successfulGame <- as.factor(steam$successfulGame)
steam <- subset(steam, select = -c(owners))
ggplot(steam,aes(x = price,y = successfulGame)) +
geom_point()+
labs(title = "Successful Game plotted Against Average Playtime",
x = "Price of a Game (dollars)",y = "Successful Game (1 = Yes, 0 = No)")
